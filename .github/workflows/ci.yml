name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run security scan
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        bandit -r src/ || true
        safety check

  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build executable
      run: |
        pyinstaller cfdi_control.spec
    
    - name: Prepare distribution package
      shell: bash
      run: |
        # Create distribution directory
        mkdir -p dist/CFDI_Control_${{ runner.os }}
        
        # Copy executable
        if [ "$RUNNER_OS" = "Windows" ]; then
          cp dist/CFDI_Control.exe dist/CFDI_Control_${{ runner.os }}/
        else
          cp dist/CFDI_Control dist/CFDI_Control_${{ runner.os }}/
        fi
        
        # Copy documentation
        cp docs/USER_MANUAL.md dist/CFDI_Control_${{ runner.os }}/
        cp README.md dist/CFDI_Control_${{ runner.os }}/
        
        # Create zip file
        cd dist
        if [ "$RUNNER_OS" = "Windows" ]; then
          powershell Compress-Archive -Path CFDI_Control_${{ runner.os }} -DestinationPath CFDI_Control_${{ runner.os }}.zip
        else
          zip -r CFDI_Control_${{ runner.os }}.zip CFDI_Control_${{ runner.os }}/
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cfdi-control-${{ runner.os }}
        path: dist/CFDI_Control_${{ runner.os }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          cfdi-control-ubuntu-latest/CFDI_Control_ubuntu-latest.zip
          cfdi-control-windows-latest/CFDI_Control_windows-latest.zip
          cfdi-control-macOS-latest/CFDI_Control_macOS-latest.zip
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Automated release for CFDI Control Application
          
          ## Changes
          - Automated build and test suite
          - Cross-platform executable generation
          - Security scanning and quality checks
          - Documentation included in distribution packages
          
          ## Downloads
          Each package contains:
          - Executable file for the platform
          - User Manual (USER_MANUAL.md)
          - README.md
          
          - Linux: CFDI_Control_ubuntu-latest.zip
          - Windows: CFDI_Control_windows-latest.zip
          - macOS: CFDI_Control_macOS-latest.zip
        draft: false
        prerelease: false 